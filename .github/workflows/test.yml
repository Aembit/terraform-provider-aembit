# Terraform Provider testing workflow.
name: Tests
env:
  AEMBIT_STACK_DOMAIN: devbroadangle.aembit-eng.com
  AEMBIT_CLIENT_ID: aembit:devbroadangle:ad6127:identity:github_idtoken:8b4602f6-c65d-4785-8656-c1c2b390272d

# This GitHub action runs your tests for each pull request and push.
# Optionally, you can turn it on using a schedule for regular testing.
on:
  pull_request:
    paths-ignore:
      - 'README.md'
    branches:
      - 'main'
  push:
    branches:
      - 'main'
  # Include workflow_call to enable execution from aembit_smoke_test/regression.yml
  workflow_call:
    inputs:
      regression:
        required: false
        type: boolean
        default: false

# Testing only needs permissions to read the repository contents.
permissions:
  contents: read
  id-token: write       # To get the GitHub Action ID JWT Token

# Ensure only one workflow run at a time - make sure this is unique to this workflow
concurrency:
  group: tf-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Ensure project builds before running testing matrix
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
        with:
          repository: Aembit/terraform-provider-aembit
          token: ${{ secrets.SUBMODULE_CHECKOUT_TOKEN }}
          submodules: recursive
      - uses: actions/setup-go@v5 # v5.x
        env:
          TAR_OPTIONS: "--skip-old-files"
        with:
          go-version-file: 'go.mod'
      - run: go mod download
      - run: go build -v .
      - name: Run linters
        uses: golangci/golangci-lint-action@v8 # v8.x
        with:
          version: latest

  generate:
    name: Generate Docs
    runs-on: ubuntu-latest
    if: always() && !inputs.regression
    steps:
      - uses: actions/checkout@v4
        with:
          repository: Aembit/terraform-provider-aembit
          token: ${{ secrets.SUBMODULE_CHECKOUT_TOKEN }}
          submodules: recursive
      - uses: hashicorp/setup-terraform@v3
      - uses: actions/setup-go@v5 # v5.x
        env:
          TAR_OPTIONS: "--skip-old-files"
        with:
          go-version-file: 'go.mod'
      - run: go generate ./...
      - name: git diff
        run: |
          git diff --compact-summary --exit-code || \
            (echo; echo "Unexpected difference in directories after code generation. Run 'go generate ./...' command and commit."; exit 1)


  # Generally test with the 3 most recent Terraform versions
  # Limit to only the latest for regression tests
  # References: https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/running-variations-of-jobs-in-a-workflow#excluding-matrix-configurations
  #             https://stackoverflow.com/a/65434401
  matrix_prep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v4
    - id: set-matrix
      name: Set up Terraform version matrix
      env:
        REGRESSION: ${{ inputs.regression }}
      run: |
        echo "REGRESSION=$REGRESSION"
        if [[ $REGRESSION == 'true' ]]; then
          echo 'matrix=["latest"]' >> "$GITHUB_OUTPUT"
        else
          echo 'matrix=["latest", "1.10", "1.9"]' >> "$GITHUB_OUTPUT"
        fi

  # Run acceptance tests in a matrix with Terraform CLI versions
  test:
    name: Terraform Provider Acceptance Tests
    needs: [build,matrix_prep]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      # TF Provider works with entities which have a single copy per tenant (ex: global policy compliance, sign-in policy)
      # It forces us to run the tests in sequence
      max-parallel: 1
      fail-fast: false
      matrix: 
        terraform: ${{ fromJson(needs.matrix_prep.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: Aembit/terraform-provider-aembit
          token: ${{ secrets.SUBMODULE_CHECKOUT_TOKEN }}
          submodules: recursive
      - uses: actions/setup-go@v5 # v5.x
        env:
          TAR_OPTIONS: "--skip-old-files"
        with:
          go-version-file: 'go.mod'
      - uses: hashicorp/setup-terraform@v3 # v3.x
        with:
          terraform_version: ${{ matrix.terraform }}
          terraform_wrapper: false
      - run: go mod download
      - env:
          TF_ACC: "1"
          TF_LOG: ${{ runner.debug == '1' && 'DEBUG' || '' }}
        run: |
          go test -json -v -coverprofile coverage.out ./internal/provider/ | tee results.json | jq 'select(.Output != null) | .Output' | sed s/\"//g          
          exit ${PIPESTATUS[0]}
        timeout-minutes: 15        
      # Upload coverage output as artifact
      - uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.terraform }}
          path: coverage.out
          retention-days: 1

  # Run SonarCloud Scanner and upload results
  sonarcloud:
    name: SonarCloud Scan
    needs: test
    if: always() && !inputs.regression
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: Aembit/terraform-provider-aembit
          token: ${{ secrets.SUBMODULE_CHECKOUT_TOKEN }}
          submodules: recursive
          fetch-depth: 0

      - name: Download Test Coverage
        uses: actions/download-artifact@v4

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}