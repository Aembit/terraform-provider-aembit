package provider

import (
	"context"

	"aembit.io/aembit"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// Ensure the implementation satisfies the expected interfaces.
var (
	_ resource.Resource                = &SignInPolicyResource{}
	_ resource.ResourceWithConfigure   = &SignInPolicyResource{}
	_ resource.ResourceWithImportState = &SignInPolicyResource{}
)

// NewSignInPolicyResource is a helper function to simplify the provider implementation.
func NewSignInPolicyResource() resource.Resource {
	return &SignInPolicyResource{}
}

// SignInPolicyResource is the resource implementation.
type SignInPolicyResource struct {
	client *aembit.CloudClient
}

// Metadata returns the resource type name.
func (r *SignInPolicyResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_signin_policy"
}

// Configure adds the provider configured client to the resource.
func (r *SignInPolicyResource) Configure(_ context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	r.client = resourceConfigure(req, resp)
}

// Schema defines the schema for the resource.
func (r *SignInPolicyResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Attributes: map[string]schema.Attribute{
			// ID field is required for Terraform Framework acceptance testing.
			"id": schema.StringAttribute{
				Description: "This identifier is generated by Terraform provider",
				Computed:    true,
			},
			"sso_required": schema.BoolAttribute{
				Description: "This Aembit Tenant setting enforces that all users must sign in with a configured SSO Identity Provider. Users with the SuperAdmin role can bypass this restriction.",
				Required:    true,
			},
			"mfa_required": schema.BoolAttribute{
				Description: "This Aembit Tenant setting enforces that all users must sign in with a configured MFA application.",
				Required:    true,
			},
		},
	}
}

// Read refreshes the Terraform state with the latest data.
func (r *SignInPolicyResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	// Get current state
	var state SignInPolicyResourceModel
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Get refreshed signInPolicy value from Aembit
	signInPolicy, _, _ := r.client.GetSignInPolicy(nil)
	state = convertSignInPolicyDTOToModel(ctx, signInPolicy, r.client.Tenant)

	// Set refreshed state
	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

func (r *SignInPolicyResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	// Get refreshed signInPolicy value from Aembit
	signInPolicy, _, _ := r.client.GetSignInPolicy(nil)
	state := convertSignInPolicyDTOToModel(ctx, signInPolicy, r.client.Tenant)

	resp.Diagnostics.Append(resp.State.Set(ctx, state)...)
}

// Update updates the resource and sets the updated Terraform state on success.
func (r *SignInPolicyResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	// Get current state
	var state SignInPolicyResourceModel
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Retrieve values from plan
	var plan SignInPolicyResourceModel
	diags = req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	var signInPolicy aembit.GetSignInPolicyDTO = convertSignInPolicyModelToDTO(ctx, &plan, r.client.Tenant)
	updateSignInResponse, err := UpdateSignInSettings(r.client, &signInPolicy)
	if err != nil {
		addResponseError(&resp.Diagnostics, err)
		return
	}

	// update the state
	state.SSORequired = types.BoolValue(updateSignInResponse.SSORequired)
	state.MFARequired = types.BoolValue(updateSignInResponse.MFARequired)

	// Set state to fully populated data
	diags = resp.State.Set(ctx, state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

func (r *SignInPolicyResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {

	resp.Diagnostics.AddWarning("Setting Tenant SignIn Policy Configuration", "The Aembit SignIn Policy is a tenant-wide configuration and cannot be defined in multiple Resource Sets. Please be sure to only define a single aembit_signin_policy resource per Aembit tenant.")

	// Retrieve values from plan
	var plan SignInPolicyResourceModel
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	var signInPolicy aembit.GetSignInPolicyDTO = convertSignInPolicyModelToDTO(ctx, &plan, r.client.Tenant)
	updateSignInResponse, err := UpdateSignInSettings(r.client, &signInPolicy)
	if err != nil {
		addResponseError(&resp.Diagnostics, err)
		return
	}

	// update the state
	plan.SSORequired = types.BoolValue(updateSignInResponse.SSORequired)
	plan.MFARequired = types.BoolValue(updateSignInResponse.MFARequired)

	// Set state to fully populated data
	diags = resp.State.Set(ctx, plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	// set and return the state
}

func (r *SignInPolicyResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	resp.Diagnostics.AddWarning("Resetting SignIn Policy to Non-Enforcing Default", "The Aembit SignIn Policy cannot be deleted, only reset to it's original non-enforcing default state.")

	// Retrieve values from state
	var state SignInPolicyResourceModel
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	_, err := UpdateSignInSettings(r.client, &aembit.GetSignInPolicyDTO{SSORequired: false, MFARequired: false})
	if err != nil {
		addResponseError(&resp.Diagnostics, err)
		return
	}

	// update the state
	state.SSORequired = types.BoolValue(false)
	state.MFARequired = types.BoolValue(false)

	// Set state to fully populated data
	diags = resp.State.Set(ctx, state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
}

func UpdateSignInSettings(client *aembit.CloudClient, dto *aembit.GetSignInPolicyDTO) (*aembit.GetSignInPolicyDTO, error) {
	mfaRequestDTO := aembit.MFASignInPolicyDTO{MFARequired: dto.MFARequired}
	mfaResponseDTO, err := client.UpdateSignInPolicyMFA(mfaRequestDTO, nil)
	if err != nil {
		return nil, err
	}

	ssoRequestDTO := aembit.SSOSignInPolicyDTO{SSORequired: dto.SSORequired}
	ssoResponseDTO, err := client.UpdateSignInPolicySSO(ssoRequestDTO, nil)
	if err != nil {
		return nil, err
	}

	return &aembit.GetSignInPolicyDTO{SSORequired: ssoResponseDTO.SSORequired, MFARequired: mfaResponseDTO.MFARequired}, nil
}

// Model to DTO conversion methods.
func convertSignInPolicyModelToDTO(_ context.Context, model *SignInPolicyResourceModel, tenantId string) aembit.GetSignInPolicyDTO {
	var dto aembit.GetSignInPolicyDTO
	dto.MFARequired = model.MFARequired.ValueBool()
	dto.SSORequired = model.SSORequired.ValueBool()
	model.ID = types.StringValue(tenantId + ":signin_policy")
	return dto
}

// DTO to Model conversion methods.
func convertSignInPolicyDTOToModel(_ context.Context, dto aembit.GetSignInPolicyDTO, tenantId string) SignInPolicyResourceModel {
	var model SignInPolicyResourceModel
	model.MFARequired = types.BoolValue(dto.MFARequired)
	model.SSORequired = types.BoolValue(dto.SSORequired)
	// this is a static identifier to identify the SignInPolicy resource in the state,
	model.ID = types.StringValue(tenantId + ":signin_policy")
	return model
}

func addResponseError(diags *diag.Diagnostics, err error) {
	diags.AddError(
		"Error updating SignInPolicy",
		"Could not update SignInPolicy, unexpected error: "+err.Error(),
	)
}
