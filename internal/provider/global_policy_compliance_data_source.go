package provider

import (
	"context"
	"fmt"
	"terraform-provider-aembit/internal/provider/models"

	"aembit.io/aembit"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
)

var (
	_ datasource.DataSource              = &globalPolicyComplianceDataSource{}
	_ datasource.DataSourceWithConfigure = &globalPolicyComplianceDataSource{}
)

type globalPolicyComplianceDataSource struct {
	client *aembit.CloudClient
}

func NewGlobalPolicyComplianceDataSource() datasource.DataSource {
	return &globalPolicyComplianceDataSource{}
}

// Configure implements datasource.DataSourceWithConfigure.
func (g *globalPolicyComplianceDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	g.client = datasourceConfigure(req, resp)
}

// Metadata implements datasource.DataSource.
func (g *globalPolicyComplianceDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_global_policy_compliance_data"
}

// Read implements datasource.DataSource.
func (g *globalPolicyComplianceDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var state models.GlobalPolicyComplianceModel

	gpcSettingsDto, err := g.client.GetGlobalPolicyComplianceSettings(nil)
	if err != nil {
		resp.Diagnostics.AddError(
			"API Error while reading Global Policy Compliance data",
			fmt.Sprintf("Details: %s", err),
		)
		return
	}
	state = convertGlobalPolicyComplianceDTOToModel(gpcSettingsDto, g.client.Tenant)
	// Set refreshed state
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

// Schema implements datasource.DataSource.
func (g *globalPolicyComplianceDataSource) Schema(_ context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		Description: "Contains Global Policy Compliance settings",
		Attributes: map[string]schema.Attribute{
			// ID field is required for Terraform Framework acceptance testing.
			"id": schema.StringAttribute{
				Description: "This identifier is generated by the Terraform Provider automatically.",
				Computed:    true,
			},
			"access_policy_trust_provider_compliance": schema.StringAttribute{
				Description: "Defines a compliance requirement for an Access Policy to have a Trust Provider. Possible values are: Required, Recommended, Optional.",
				Computed:    true,
				Validators: []validator.String{
					stringvalidator.OneOf("Required", "Recommended", "Optional"),
				},
			},
			"access_policy_access_condition_compliance": schema.StringAttribute{
				Description: "Defines a compliance requirement for an Access Policy to have an Access Condition. Possible values are: Required, Recommended, Optional.",
				Computed:    true,
				Validators: []validator.String{
					stringvalidator.OneOf("Required", "Recommended", "Optional"),
				},
			},
			"agent_controller_trust_provider_compliance": schema.StringAttribute{
				Description: "Defines a compliance requirement for an Agent Controller to have a Trust Provider. Possible values are: Required, Recommended, Optional.",
				Computed:    true,
				Validators: []validator.String{
					stringvalidator.OneOf("Required", "Recommended", "Optional"),
				},
			},
			"agent_controller_allowed_tls_hostname_compliance": schema.StringAttribute{
				Description: "Defines a compliance requirement for an Agent Controller to specify Allowed TLS Hostname parameter. Possible values are: Required, Recommended, Optional.",
				Computed:    true,
				Validators: []validator.String{
					stringvalidator.OneOf("Required", "Recommended", "Optional"),
				},
			},
		},
	}
}
